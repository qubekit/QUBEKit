# ForceBalance input file generated by MakeInputFile.py
# The octothorpe '#' is a comment symbol
# Note: If the specified value is 'None' then the option will truly be set to None - not the string 'None'
# Note: 'Section' option types are more complicated and may require you to read the documentation
# Note: Boolean option types require no value, the key being present implies 'True'

$options
# (string) Directory containing force fields, relative to project directory
ffdir forcefield

# (string) Type of the penalty, L2 or L1 in the optimizer
penalty_type {{ penalty_type }}

# (allcap) The job type, defaults to a single-point evaluation of objective function
jobtype {{ job_type }}

# (list) The names of force fields, corresponding to directory forcefields/file_name.(itp|gen)
forcefield bespoke.xml

# (int) Maximum number of steps in an optimization
maxstep {{max_iterations}}

# (float) Convergence criterion of step size (just needs to fall below this threshold)
convergence_step {{convergence_step_criteria}}

# (float) Convergence criterion of objective function (in MainOptimizer this is the stdev of x2 over 10 steps)
convergence_objective {{convergence_objective_criteria}}

# (float) Convergence criterion of gradient norm
convergence_gradient {{convergence_gradient_criteria}}

# The number of convergence criteria that must be met for main optimizer to converge
criteria {{n_criteria}}

# (float) Minimum eigenvalue for applying steepest descent correction in the MainOptimizer
eig_lowerbound {{eig_lowerbound}}

# (float) Step size for finite difference derivatives in many functions (get_(G/H) in fitsim, FDCheckG)
finite_difference_h {{finite_difference_h}}

# (float) Factor for multiplicative penalty function in objective function
penalty_additive {{penalty_additive}}

trust0 {{initial_trust_radius}}
mintrust {{minimum_trust_radius}}
error_tolerance {{error_tolerance}}
adaptive_factor {{adaptive_factor}}
adaptive_damping {{adaptive_damping}}
normalize_weights {{normalize_weights}}
# any extras are added here like print hessian
{%- for key, value in extras.items() %}
{{ key }}  {{ value if value is not none else "" }}
{%- endfor %}

# Charge constraints are taken care of using "evals".
constrain_charge false

priors
   {%- for key, value in priors.items() %}
   {{ key }} :  {{ value }}
   {%- endfor %}
/priors

$end

{%- for target, entries in fitting_targets.items() %}
{%- for entry_name in entries %}
$target
name {{entry_name}}
type {{target}}
{%- for key, value in target_options[target].items() %}
{{key}} {{ value if value is not none else "" }}
{%- endfor %}
$end
{%- endfor %}
{%- endfor %}